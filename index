<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anison100 - アニメソングランキング</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Noto+Sans+JP:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Noto Sans JP', sans-serif;
            background-color: #0a0a14;
            background-image: radial-gradient(circle at 1px 1px, rgba(255,255,255,0.1) 1px, transparent 0);
            background-size: 20px 20px;
        }
        .font-orbitron {
            font-family: 'Orbitron', sans-serif;
        }
        .neon-text {
            color: #fff;
            text-shadow:
                0 0 5px #fff,
                0 0 10px #fff,
                0 0 20px #f871b5,
                0 0 30px #f871b5,
                0 0 40px #f871b5,
                0 0 55px #f871b5,
                0 0 75px #f871b5;
        }
        .video-container {
            position: relative;
            width: 100%;
            padding-bottom: 56.25%;
            height: 0;
            border-radius: 0.5rem;
            overflow: hidden;
        }
        .video-container iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #0a0a14; 
        }
        ::-webkit-scrollbar-thumb {
            background: #4c1d95; 
            border-radius: 4px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #5b21b6; 
        }
        .filter-button {
            color: #e0e0e0;
            background-color: rgba(30, 27, 75, 0.5);
            border: 1px solid #a78bfa;
            transition: all 0.3s ease-in-out;
            text-shadow: 0 0 2px #a78bfa;
            flex-shrink: 0;
        }
        .filter-button:hover:not(:disabled) {
            color: #fff;
            background-color: rgba(167, 139, 250, 0.3);
            box-shadow: 0 0 10px #a78bfa, inset 0 0 5px #a78bfa;
        }
        .filter-button.active {
            color: white;
            background-color: #a78bfa;
            box-shadow: 0 0 15px #a78bfa, 0 0 25px #a78bfa;
            transform: scale(1.05);
            text-shadow: 0 0 5px #fff;
        }
        .highlight-new {
            animation: highlight-border 2.5s ease-out;
        }
        @keyframes highlight-border {
            0%, 100% {
                border-color: #a78bfa;
                box-shadow: 0 0 10px #a78bfa, inset 0 0 5px #a78bfa;
            }
            50% {
                border-color: #f871b5;
                box-shadow: 0 0 25px #f871b5, inset 0 0 15px #f871b5;
            }
        }
        .neon-card {
            background: rgba(10, 10, 20, 0.7);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid #a78bfa;
            transition: all 0.3s ease-in-out;
            box-shadow: 0 0 10px #a78bfa, inset 0 0 5px #a78bfa;
            position: relative;
        }
        .neon-card:hover {
            transform: translateY(-5px) scale(1.01);
            box-shadow: 0 0 20px #a78bfa, inset 0 0 10px #a78bfa;
        }
        .hot-icon {
            text-shadow: 0 0 5px #ff4500, 0 0 10px #ff4500;
            animation: flicker 1.5s infinite alternate;
        }
        @keyframes flicker {
            0%, 18%, 22%, 25%, 53%, 57%, 100% {
                text-shadow:
                0 0 4px #fff,
                0 0 11px #fff,
                0 0 19px #fff,
                0 0 40px #ff4500,
                0 0 80px #ff4500,
                0 0 90px #ff4500,
                0 0 100px #ff4500,
                0 0 150px #ff4500;
            }
            20%, 24%, 55% {        
                text-shadow: none;
            }
        }
        .tag-item {
            display: inline-flex;
            align-items: center;
            background-color: #4c1d95;
            color: #e0e0e0;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.875rem;
            line-height: 1.25rem;
        }
        .delete-tag {
            margin-left: 0.5rem;
            width: 1rem;
            height: 1rem;
            background-color: rgba(255,255,255,0.2);
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
            line-height: 1rem;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .delete-tag:hover {
            background-color: rgba(255,255,255,0.4);
        }
        #filter-section::-webkit-scrollbar {
            display: none;
        }
        #filter-section {
            -ms-overflow-style: none;
            scrollbar-width: none;
        }
    </style>
</head>
<body class="bg-[#0a0a14] text-gray-200">

    <div class="container mx-auto p-4 md:p-8">
        <header class="text-center mb-10 md:mb-16">
            <h1 class="text-4xl sm:text-5xl md:text-6xl font-bold font-orbitron neon-text">Anison100</h1>
            <p class="text-gray-500 text-sm mt-4">公式の埋め込み可能な映像のみを掲載してます。</p>
        </header>

        <div>
            <div id="main-view">
                <section id="add-button-container" class="text-center mb-10 hidden">
                    <button id="show-add-view-button" class="group filter-button font-bold py-3 px-6 rounded-full text-lg">
                        <svg class="w-6 h-6 mr-2 inline-block transition-transform duration-300 group-hover:rotate-90" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>
                        新しい映像を追加する
                    </button>
                </section>

                <section class="mb-10 max-w-4xl mx-auto px-4 md:px-0">
                    <div class="relative mb-6">
                        <span class="absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none">
                            <svg class="w-5 h-5 text-gray-400" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M21 21L15 15M17 10C17 13.866 13.866 17 10 17C6.13401 17 3 13.866 3 10C3 6.13401 6.13401 3 10 3C13.866 3 17 6.13401 17 10Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg>
                        </span>
                        <input type="text" id="search-input" placeholder="タイトル、アーティスト、年代、タグなどで検索..." class="w-full bg-black/50 border border-purple-800 text-white placeholder-gray-500 rounded-full py-3 pl-12 pr-12 focus:ring-2 focus:ring-pink-500 focus:border-pink-500 transition-all duration-300">
                        <button id="clear-search-button" class="absolute inset-y-0 right-0 flex items-center pr-4 text-gray-500 hover:text-white transition-colors hidden">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                        </button>
                    </div>
                    <div id="filter-section" class="flex overflow-x-auto justify-start flex-nowrap md:flex-wrap md:justify-center gap-2 md:gap-3 pb-2">
                        <button class="filter-button active font-medium py-2 px-5 rounded-full" data-filter="all">総合</button>
                        <button class="filter-button font-medium py-2 px-5 rounded-full" data-filter="hot">HOT</button>
                        <button class="filter-button font-medium py-2 px-5 rounded-full" data-filter="new">NEW</button>
                        <button class="filter-button font-medium py-2 px-5 rounded-full" data-filter="OP">OP</button>
                        <button class="filter-button font-medium py-2 px-5 rounded-full" data-filter="ED">ED</button>
                        <button class="filter-button font-medium py-2 px-5 rounded-full" data-filter="MOVIE">MOVIE</button>
                    </div>
                </section>

                <main id="ranking-container" class="space-y-6">
                </main>
            </div>

            <div id="add-view" class="hidden">
                <section class="neon-card mb-8 md:mb-12 p-6 md:p-8 rounded-2xl max-w-2xl mx-auto">
                    <h2 class="text-2xl font-bold mb-6 text-center font-orbitron neon-text">新しい映像を追加</h2>
                    <form id="add-song-form" class="space-y-4">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <input type="text" id="animeTitle" placeholder="アニメタイトル" required class="bg-black/50 border border-purple-800 text-white placeholder-gray-500 rounded-lg p-3 focus:ring-2 focus:ring-pink-500 focus:border-pink-500 w-full transition-colors">
                             <input type="number" id="animeYear" placeholder="放送年 (例: 2025)" required min="1950" max="2099" class="bg-black/50 border border-purple-800 text-white placeholder-gray-500 rounded-lg p-3 focus:ring-2 focus:ring-pink-500 focus:border-pink-500 w-full transition-colors">
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                           <select id="songType" required class="bg-black/50 border border-purple-800 text-white rounded-lg p-3 focus:ring-2 focus:ring-pink-500 focus:border-pink-500 w-full transition-colors">
                                <option value="OP">OP</option>
                                <option value="ED">ED</option>
                                <option value="MOVIE">MOVIE</option>
                            </select>
                            <input type="text" id="artist" placeholder="アーティスト名など" required class="bg-black/50 border border-purple-800 text-white placeholder-gray-500 rounded-lg p-3 focus:ring-2 focus:ring-pink-500 focus:border-pink-500 w-full transition-colors">
                        </div>
                         <div>
                            <input type="text" id="songTitle" placeholder="曲名 / シーン名" required class="bg-black/50 border border-purple-800 text-white placeholder-gray-500 rounded-lg p-3 focus:ring-2 focus:ring-pink-500 focus:border-pink-500 w-full transition-colors">
                        </div>
                        <div>
                             <div id="tag-input-container" class="flex flex-wrap items-center gap-2 p-2 bg-black/50 border border-purple-800 rounded-lg focus-within:ring-2 focus-within:ring-pink-500 focus-within:border-pink-500">
                                <input type="text" id="tag-input-field" placeholder="タグを入力してEnter" class="flex-grow bg-transparent text-white placeholder-gray-500 focus:outline-none p-1">
                            </div>
                        </div>
                        <div class="relative">
                            <input type="url" id="youtubeUrl" placeholder="YouTubeのURL" required class="w-full bg-black/50 border border-purple-800 text-white placeholder-gray-500 rounded-lg p-3 pr-24 focus:ring-2 focus:ring-pink-500 focus:border-pink-500 transition-colors">
                            <button type="button" id="preview-button" class="absolute top-1/2 right-2 -translate-y-1/2 text-sm filter-button font-bold px-3 py-1 rounded-md">プレビュー</button>
                        </div>
                        <div id="youtube-preview-container" class="hidden mt-4 aspect-video">
                        </div>
                        <button type="submit" class="w-full filter-button font-bold py-3 px-6 rounded-full text-lg">
                            この内容で追加する
                        </button>
                        <button type="button" id="cancel-add-button" class="w-full bg-gray-700 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-full transition-colors">
                            キャンセル
                        </button>
                    </form>
                </section>
            </div>
        </div>

        <footer class="text-center mt-16 text-gray-500">
            <p>© 2025 Anison100. All Rights Reserved.</p>
            <button id="admin-toggle-button" class="mt-4 text-xs text-gray-600 hover:text-purple-400 transition-colors">管理者モード</button>
        </footer>
    </div>

    <div id="message-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden transition-opacity duration-300">
        <div class="neon-card p-8 rounded-2xl shadow-xl max-w-sm w-full transform transition-transform duration-300 scale-95">
            <p id="modal-message" class="text-white text-center mb-6 text-lg"></p>
            <button id="modal-close-button" class="w-full filter-button font-bold py-2 px-4 rounded-full">
                閉じる
            </button>
        </div>
    </div>

    <div id="password-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden transition-opacity duration-300">
        <div class="neon-card p-8 rounded-2xl shadow-xl max-w-sm w-full transform transition-transform duration-300 scale-95">
            <h3 class="text-xl font-bold mb-6 text-center font-orbitron neon-text">管理者認証</h3>
            <form id="password-form" class="space-y-4">
                <input type="password" id="password-input" placeholder="パスワード" required class="w-full bg-black/50 border border-purple-800 text-white placeholder-gray-500 rounded-lg p-3 focus:ring-2 focus:ring-pink-500 focus:border-pink-500 transition-colors">
                <button type="submit" class="w-full filter-button font-bold py-2 px-4 rounded-full">認証</button>
            </form>
        </div>
    </div>
    
    <div id="delete-confirm-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden transition-opacity duration-300">
        <div class="neon-card p-8 rounded-2xl shadow-xl max-w-sm w-full transform transition-transform duration-300 scale-95">
            <p id="delete-confirm-message" class="text-white text-center mb-6 text-lg">この映像を本当に削除しますか？</p>
            <div class="flex justify-center gap-4">
                 <button id="confirm-delete-button" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-full transition-colors">削除</button>
                 <button id="cancel-delete-button" class="w-full bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-full transition-colors">キャンセル</button>
            </div>
        </div>
    </div>


    <script>
        const mainView = document.getElementById('main-view');
        const addView = document.getElementById('add-view');
        const showAddViewButton = document.getElementById('show-add-view-button');
        const addButtonContainer = document.getElementById('add-button-container');
        const cancelAddButton = document.getElementById('cancel-add-button');
        const rankingContainer = document.getElementById('ranking-container');
        const addSongForm = document.getElementById('add-song-form');
        const modal = document.getElementById('message-modal');
        const modalMessage = document.getElementById('modal-message');
        const modalCloseButton = document.getElementById('modal-close-button');
        const passwordModal = document.getElementById('password-modal');
        const passwordForm = document.getElementById('password-form');
        const passwordInput = document.getElementById('password-input');
        const deleteConfirmModal = document.getElementById('delete-confirm-modal');
        const confirmDeleteButton = document.getElementById('confirm-delete-button');
        const cancelDeleteButton = document.getElementById('cancel-delete-button');
        const filterContainer = document.getElementById('filter-section');
        const searchInput = document.getElementById('search-input');
        const clearSearchButton = document.getElementById('clear-search-button');
        const previewButton = document.getElementById('preview-button');
        const youtubePreviewContainer = document.getElementById('youtube-preview-container');
        const tagInputContainer = document.getElementById('tag-input-container');
        const tagInputField = document.getElementById('tag-input-field');
        const adminToggleButton = document.getElementById('admin-toggle-button');

        let isAdmin = false;
        let songIdToDelete = null;

        function generateVoteTimestamps(totalVotes) {
            const timestamps = [];
            const now = Date.now();
            const currentYearStart = new Date(new Date().getFullYear(), 0, 1).getTime();
            const lastYearStart = new Date(new Date().getFullYear() - 1, 0, 1).getTime();

            for (let i = 0; i < totalVotes; i++) {
                if (Math.random() < 0.4) {
                    timestamps.push(Math.floor(Math.random() * (now - currentYearStart)) + currentYearStart);
                } else {
                    timestamps.push(Math.floor(Math.random() * (currentYearStart - lastYearStart)) + lastYearStart);
                }
            }
            return timestamps;
        }

        let songData = [
            { id: 1689724800001, animeTitle: '【推しの子】', songTitle: 'アイドル', artist: 'YOASOBI', youtubeId: 'ZRtdQ81jPUQ', type: 'OP', votes: generateVoteTimestamps(2150), year: 2023, tags: ['アイドル', '転生', '話題作'] },
            { id: 1689724800002, animeTitle: '呪術廻戦', songTitle: '廻廻奇譚', artist: 'Eve', youtubeId: 'GwaRztMaoY0', type: 'OP', votes: generateVoteTimestamps(1910), year: 2020, tags: ['バトル', 'ダークファンタジー'] },
            { id: 1689724800003, animeTitle: '新世紀エヴァンゲリオン', songTitle: '残酷な天使のテーゼ', artist: '高橋洋子', youtubeId: 'o6wtDPVkKqI', type: 'OP', votes: generateVoteTimestamps(1830), year: 1995, tags: ['ロボット', '伝説', '90年代'] },
            { id: 1689724800004, animeTitle: '鬼滅の刃', songTitle: '紅蓮華', artist: 'LiSA', youtubeId: 'CwkzK-F0Y00', type: 'OP', votes: generateVoteTimestamps(1780), year: 2019, tags: ['バトル', '感動'] },
            { id: 1689724800005, animeTitle: '鋼の錬金術師 FULLMETAL ALCHEMIST', songTitle: 'again', artist: 'YUI', youtubeId: 'eBizk_2g9xk', type: 'OP', votes: generateVoteTimestamps(1650), year: 2009, tags: ['ファンタジー', '名作'] },
            { id: 1689724800006, animeTitle: '魔法少女まどか☆マギカ', songTitle: 'コネクト', artist: 'ClariS', youtubeId: 'Y5_Y_36w5sY', type: 'OP', votes: generateVoteTimestamps(1590), year: 2011, tags: ['魔法少女', 'ダークファンタジー', '鬱展開'] },
            { id: 1689724800007, animeTitle: '進撃の巨人', songTitle: '紅蓮の弓矢', artist: 'Linked Horizon', youtubeId: 'G_r_ys02GqA', type: 'OP', votes: generateVoteTimestamps(1520), year: 2013, tags: ['バトル', '絶望'] },
            { id: 1689724800008, animeTitle: '化物語', songTitle: '君の知らない物語', artist: 'supercell', youtubeId: 'eLPs_w-F1lY', type: 'ED', votes: generateVoteTimestamps(1440), year: 2009, tags: ['恋愛', '青春', '泣ける'] },
            { id: 1689724800009, animeTitle: 'カウボーイビバップ', songTitle: 'Tank!', artist: 'シートベルツ', youtubeId: 'n2rVnRwW0h8', type: 'OP', votes: generateVoteTimestamps(1380), year: 1998, tags: ['ジャズ', 'スタイリッシュ', '90年代'] },
            { id: 1689724800010, animeTitle: '劇場版「鬼滅の刃」無限列車編', songTitle: '炎', artist: 'LiSA', youtubeId: '4DxL6IKm8cg', type: 'MOVIE', votes: generateVoteTimestamps(2050), year: 2020, tags: ['バトル', '感動', '泣ける'] },
            { id: 1689724800011, animeTitle: 'とらドラ！', songTitle: 'オレンジ', artist: '逢坂大河・櫛枝実乃梨・川嶋亜美', youtubeId: 'a_cTj23Y1wA', type: 'ED', votes: generateVoteTimestamps(1120), year: 2008, tags: ['恋愛', '学園', '青春'] },
            { id: 1735689600001, animeTitle: 'チェンソーマン シーズン2', songTitle: 'インザバックルーム', artist: 'syudou', youtubeId: 'v4yLeNt-kCU', type: 'OP', votes: generateVoteTimestamps(1850), year: 2025, tags: ['バトル', 'ダークファンタジー'] },
            { id: 1735689600002, animeTitle: '劇場版 魔法少女まどか☆マギカ 〈ワルプルギスの廻天〉', songTitle: 'カラフル', artist: 'ClariS', youtubeId: 'K1u_g-g_V-c', type: 'MOVIE', votes: generateVoteTimestamps(2200), year: 2025, tags: ['魔法少女', '続編', '話題作'] }
        ];
        
        const artists = ['YOASOBI', 'Eve', 'LiSA', 'Ado', 'Official髭男dism', 'King Gnu', 'Vaundy', 'ZUTOMAYO'];
        const types = ['OP', 'ED'];
        const years = [2020, 2021, 2022, 2023, 2024];
        const tagsPool = ['バトル', '感動', '青春', '恋愛', 'ファンタジー', '話題作', '泣ける', 'スタイリッシュ', '日常', 'ギャグ'];

        for (let i = 14; i <= 105; i++) {
            const artist = artists[Math.floor(Math.random() * artists.length)];
            const type = types[Math.floor(Math.random() * types.length)];
            const year = years[Math.floor(Math.random() * years.length)];
            const numTags = Math.floor(Math.random() * 3) + 1;
            const tags = [];
            for (let t = 0; t < numTags; t++) {
                tags.push(tagsPool[Math.floor(Math.random() * tagsPool.length)]);
            }
            songData.push({
                id: 1689724800000 + i,
                animeTitle: `サンプルアニメ ${i}`,
                songTitle: `サンプル曲 ${i}`,
                artist: artist,
                youtubeId: 'dQw4w9WgXcQ',
                type: type,
                votes: generateVoteTimestamps(Math.floor(Math.random() * 1000)),
                year: year,
                tags: [...new Set(tags)]
            });
        }
        
        let currentFilter = 'all';

        function getVotedItems() {
            const voted = localStorage.getItem('anison100_voted_items');
            return voted ? JSON.parse(voted) : [];
        }

        function addVotedItem(songId) {
            const votedItems = getVotedItems();
            votedItems.push(songId);
            localStorage.setItem('anison100_voted_items', JSON.stringify(votedItems));
        }

        function showView(viewId) {
            mainView.classList.add('hidden');
            addView.classList.add('hidden');
            document.getElementById(viewId).classList.remove('hidden');
        }

        function renderRankings() {
            let displayData = [...songData];
            const searchTerm = searchInput.value.toLowerCase();

            if (currentFilter === 'hot') {
                const currentYear = new Date().getFullYear();
                displayData = displayData.filter(song => song.year === currentYear);
            } else if (currentFilter !== 'all' && currentFilter !== 'new') {
                displayData = displayData.filter(song => song.type === currentFilter);
            }

            if (searchTerm) {
                displayData = displayData.filter(song => {
                    const tagMatch = song.tags ? song.tags.some(tag => tag.toLowerCase().includes(searchTerm)) : false;
                    return (
                        song.animeTitle.toLowerCase().includes(searchTerm) ||
                        song.songTitle.toLowerCase().includes(searchTerm) ||
                        song.artist.toLowerCase().includes(searchTerm) ||
                        String(song.year).includes(searchTerm) ||
                        tagMatch
                    );
                });
            }

            if (currentFilter === 'new') {
                displayData.sort((a, b) => b.id - a.id);
            } else { 
                displayData.sort((a, b) => b.votes.length - a.votes.length);
            }
            
            const finalDisplayData = displayData.slice(0, 100);

            clearSearchButton.classList.toggle('hidden', !searchTerm);
            clearSearchButton.classList.toggle('flex', !!searchTerm);


            rankingContainer.innerHTML = '';
            if(finalDisplayData.length === 0) {
                rankingContainer.innerHTML = `<p class="text-center text-gray-400 py-10">該当する映像が見つかりませんでした。</p>`;
            } else {
                finalDisplayData.forEach((song, index) => {
                    const rank = index + 1;
                    const card = createSongCard(song, rank);
                    rankingContainer.appendChild(card);
                });
            }
        }

        function createSongCard(song, rank) {
            const card = document.createElement('article');
            card.id = `song-card-${song.id}`;
            card.className = 'neon-card rounded-2xl p-4 md:p-5';
            card.dataset.songId = song.id;

            let rankColorClass = '';
            const isRankedView = (currentFilter !== 'new');
            if (isRankedView && rank === 1) rankColorClass = 'text-yellow-300';
            else if (isRankedView && rank === 2) rankColorClass = 'text-slate-300';
            else if (isRankedView && rank === 3) rankColorClass = 'text-orange-400';
            else rankColorClass = 'text-purple-300';
            
            let hotIcon = '';
            if (currentFilter === 'hot' && rank <= 3) {
                hotIcon = '<span class="hot-icon text-orange-500 text-sm ml-2">HOT</span>';
            }

            let typeLabel = '';
            if (song.type === 'OP') {
                typeLabel = '<span class="bg-pink-500/80 text-white text-xs font-bold px-2.5 py-1 rounded-full">OP</span>';
            } else if (song.type === 'ED') {
                typeLabel = '<span class="bg-blue-500/80 text-white text-xs font-bold px-2.5 py-1 rounded-full">ED</span>';
            } else if (song.type === 'MOVIE') {
                typeLabel = '<span class="bg-orange-500/80 text-white text-xs font-bold px-2.5 py-1 rounded-full">MOVIE</span>';
            }
            
            let tagsHTML = '';
            if (song.tags && song.tags.length > 0) {
                tagsHTML = `
                    <div class="mt-3 flex flex-wrap justify-center md:justify-start gap-2">
                        ${song.tags.map(tag => `<a href="#" class="tag-link text-xs bg-gray-700 hover:bg-gray-600 text-gray-300 px-2 py-1 rounded-full transition-colors">${tag}</a>`).join('')}
                    </div>
                `;
            }

            const deleteButtonHTML = isAdmin ? `<button class="delete-song-button absolute top-3 right-3 text-gray-600 hover:text-red-500 transition-colors">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                    </button>` : '';

            const votedItems = getVotedItems();
            const hasVoted = votedItems.includes(song.id);
            const voteButtonHTML = hasVoted 
                ? `<button class="filter-button font-bold px-6 py-2 rounded-full opacity-50 cursor-not-allowed" disabled>投票済み</button>`
                : `<button class="vote-button filter-button font-bold px-6 py-2 rounded-full">投票する</button>`;

            card.innerHTML = `
                ${deleteButtonHTML}
                <div class="flex flex-col md:flex-row items-center gap-5">
                    <div class="font-bold text-3xl md:text-4xl w-16 text-center shrink-0 font-orbitron ${rankColorClass}" style="text-shadow: 0 0 7px currentColor;">${rank}</div>
                    <div class="w-full md:w-1/3 lg:w-2/5 shrink-0">
                        <div class="video-container shadow-lg">
                            <iframe src="https://www.youtube.com/embed/${song.youtubeId}" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen loading="lazy"></iframe>
                        </div>
                    </div>
                    <div class="flex-1 text-center md:text-left w-full">
                        <h2 class="text-xl md:text-2xl font-bold text-white mb-1">${song.songTitle}${hotIcon}</h2>
                        <p class="text-gray-300 text-base mb-2"><a href="#" class="artist-link hover:text-pink-400 transition-colors duration-300">${song.artist}</a></p>
                        <p class="text-gray-400 text-sm mb-4">${song.animeTitle} (${song.year}年)</p>
                        <div class="flex items-center justify-center md:justify-start gap-4">
                            ${voteButtonHTML}
                            <div class="text-lg font-semibold text-gray-300"><span class="vote-count">${song.votes.length.toLocaleString()}</span> 票</div>
                            ${typeLabel}
                        </div>
                        ${tagsHTML}
                    </div>
                </div>`;
            return card;
        }

        function extractYouTubeId(url) {
            let videoId = null;
            const regex = /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|\S*?[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]{11})/;
            const match = url.match(regex);
            if (match) videoId = match[1];
            return videoId;
        }

        function showModal(message) {
            modalMessage.textContent = message;
            modal.classList.remove('hidden');
            setTimeout(() => {
                modal.firstElementChild.classList.remove('scale-95');
                modal.firstElementChild.classList.add('scale-100');
            }, 10);
        }

        function hideModal() {
            modal.firstElementChild.classList.remove('scale-100');
            modal.firstElementChild.classList.add('scale-95');
            setTimeout(() => {
                 modal.classList.add('hidden');
            }, 300);
        }

        function clearPreview() {
            youtubePreviewContainer.innerHTML = '';
            youtubePreviewContainer.classList.add('hidden');
        }

        function clearTags() {
            const tags = tagInputContainer.querySelectorAll('.tag-item');
            tags.forEach(tag => tag.remove());
        }

        showAddViewButton.addEventListener('click', () => showView('add-view'));
        
        cancelAddButton.addEventListener('click', () => {
            showView('main-view');
            addSongForm.reset();
            clearPreview();
            clearTags();
        });

        previewButton.addEventListener('click', () => {
            const url = document.getElementById('youtubeUrl').value;
            const videoId = extractYouTubeId(url);
            if (videoId) {
                youtubePreviewContainer.innerHTML = `<iframe class="w-full h-full" src="https://www.youtube.com/embed/${videoId}" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>`;
                youtubePreviewContainer.classList.remove('hidden');
            } else {
                youtubePreviewContainer.innerHTML = `<p class="text-red-400 text-center p-4">無効なYouTube URLです。</p>`;
                youtubePreviewContainer.classList.remove('hidden');
            }
        });

        searchInput.addEventListener('input', renderRankings);
        
        clearSearchButton.addEventListener('click', () => {
            searchInput.value = '';
            renderRankings();
        });

        rankingContainer.addEventListener('click', (event) => {
            const voteButton = event.target.closest('.vote-button');
            const artistLink = event.target.closest('.artist-link');
            const tagLink = event.target.closest('.tag-link');
            const deleteButton = event.target.closest('.delete-song-button');

            if (deleteButton) {
                const card = deleteButton.closest('article');
                songIdToDelete = parseInt(card.dataset.songId, 10);
                deleteConfirmModal.classList.remove('hidden');
                setTimeout(() => deleteConfirmModal.firstElementChild.classList.remove('scale-95'), 10);
            } else if (voteButton) {
                const card = voteButton.closest('article');
                const songId = parseInt(card.dataset.songId, 10);
                const votedItems = getVotedItems();

                if (votedItems.includes(songId)) {
                    showModal('この映像には既に投票済みです。');
                    return;
                }

                const song = songData.find(s => s.id === songId);
                if (song) {
                    song.votes.push(Date.now());
                    addVotedItem(songId);
                    renderRankings();
                }
            } else if (artistLink || tagLink) {
                event.preventDefault();
                const link = artistLink || tagLink;
                searchInput.value = link.textContent;
                renderRankings();
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }
        });
        
        confirmDeleteButton.addEventListener('click', () => {
            if (songIdToDelete !== null) {
                const songIndex = songData.findIndex(s => s.id === songIdToDelete);
                if (songIndex > -1) {
                    songData.splice(songIndex, 1);
                    renderRankings();
                }
                songIdToDelete = null;
            }
            deleteConfirmModal.classList.add('hidden');
        });

        cancelDeleteButton.addEventListener('click', () => {
            songIdToDelete = null;
            deleteConfirmModal.classList.add('hidden');
        });

        tagInputField.addEventListener('keydown', (event) => {
            if (event.key === 'Enter') {
                event.preventDefault();
                const tagName = tagInputField.value.trim();
                if (tagName) {
                    const tagElement = document.createElement('span');
                    tagElement.className = 'tag-item';
                    tagElement.innerHTML = `<span>${tagName}</span><button type="button" class="delete-tag">×</button>`;
                    tagInputContainer.insertBefore(tagElement, tagInputField);
                    tagInputField.value = '';
                }
            }
        });

        tagInputContainer.addEventListener('click', (event) => {
            if (event.target.classList.contains('delete-tag')) {
                event.target.parentElement.remove();
            }
        });

        addSongForm.addEventListener('submit', (event) => {
            event.preventDefault();
            const animeTitle = document.getElementById('animeTitle').value.trim();
            const animeYear = document.getElementById('animeYear').value.trim();
            const songTitle = document.getElementById('songTitle').value.trim();
            const artist = document.getElementById('artist').value.trim();
            const type = document.getElementById('songType').value;
            const youtubeUrl = document.getElementById('youtubeUrl').value.trim();
            
            const tagElements = tagInputContainer.querySelectorAll('.tag-item span');
            const tags = Array.from(tagElements).map(span => span.textContent);

            if (!animeTitle || !animeYear || !songTitle || !artist || !youtubeUrl) {
                showModal('すべての項目を入力してください。');
                return;
            }
            const youtubeId = extractYouTubeId(youtubeUrl);
            if (!youtubeId) {
                showModal('無効なYouTube URLです。正しいURL形式で入力してください。');
                return;
            }

            const newId = Date.now();
            const newSong = { id: newId, animeTitle, songTitle, artist, youtubeId, type, votes: [Date.now()], year: parseInt(animeYear), tags };
            songData.push(newSong);
            
            showView('main-view');
            addSongForm.reset();
            clearPreview();
            clearTags();
            
            currentFilter = 'new';
            document.querySelectorAll('.filter-button').forEach(btn => btn.classList.remove('active'));
            document.querySelector('.filter-button[data-filter="new"]').classList.add('active');

            renderRankings();

            setTimeout(() => {
                const newCard = document.getElementById(`song-card-${newId}`);
                if (newCard) {
                    newCard.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    newCard.classList.add('highlight-new');
                    setTimeout(() => {
                        newCard.classList.remove('highlight-new');
                    }, 2500);
                }
            }, 100);
        });
        
        filterContainer.addEventListener('click', (event) => {
            if (event.target.tagName === 'BUTTON') {
                currentFilter = event.target.dataset.filter;
                document.querySelectorAll('.filter-button').forEach(btn => {
                    btn.classList.remove('active');
                });
                event.target.classList.add('active');
                renderRankings();
            }
        });

        modalCloseButton.addEventListener('click', () => hideModal());

        adminToggleButton.addEventListener('click', () => {
            if (isAdmin) {
                isAdmin = false;
                addButtonContainer.classList.add('hidden');
                adminToggleButton.textContent = '管理者モード';
                adminToggleButton.classList.remove('text-pink-400');
                if (!addView.classList.contains('hidden')) {
                    showView('main-view');
                }
                renderRankings();
            } else {
                passwordModal.classList.remove('hidden');
                setTimeout(() => passwordModal.firstElementChild.classList.remove('scale-95'), 10);
            }
        });

        passwordForm.addEventListener('submit', (event) => {
            event.preventDefault();
            if (passwordInput.value === 'anisondanson1478') {
                isAdmin = true;
                addButtonContainer.classList.remove('hidden');
                adminToggleButton.textContent = '管理者モード ON';
                adminToggleButton.classList.add('text-pink-400');
                renderRankings();
                passwordModal.classList.add('hidden');
                passwordInput.value = '';
            } else {
                passwordModal.classList.add('hidden');
                showModal('パスワードが違います。');
                passwordInput.value = '';
            }
        });

        document.addEventListener('DOMContentLoaded', renderRankings);
    </script>
</body>
</html>
